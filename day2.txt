Vue目录结构

build：项目构建webpack相关代码
config：配置目录，包括端口号。我们初学可以使用默认的
nod_modules：npm加载的项目依赖模块
src:这是我们要开发的目录，基本要做的事情都在这个目录里面，里面包含了几个目录和文件
  1.assets：放置一些图片 如logo
  2.components：目录里面放了一个组件文件，可以不用
  3.APP.Vue：项目入口文件，我们可以直接将组件写这里，而不使用components目录
  4.main.js:项目的核心文件

static：静态资源目录，如图片、字体
   test:初始测试目录，可删除
.xxxx文件：配置文件。包括语法配置，git配置等
index.html：首页入口文件，你可以添加一些meta信息或统计代码啥的
package.json:项目配置文件
README.md项目的说明文档,markdown格式


Vue.js模板语法
Vue.js使用了 基于HTML的模板语法，允许开发者声明式的将DOM绑定至底层Vue实例的数据
Vue.js的 核心是一个 允许你采用简洁的模板语法来声明式的将数据渲染进DOM的系统。
结合响应系统，在应用状态改变时，Vue能够智能的计算出重新渲染组件的最小代价并应用到DOM操作上

插值文本
数据绑定是最常见的形式就是使用{{...}}双大括号的文本插值：
<div id="app">
 <p>{{msg}}</p>
</div>


过滤器
Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由管道符指示
<!--在两个大括号当中-->
{{message|capitalize}}
<!--在v-bind指令中-->
<div v-bind:id="rawId|formatId"></div>






split('') 是分裂的意思，也就是把一个数据拆分。
var vm = new Vue({
    date:{
        message=" Not split "
    }
 )}

message.split('') == [ "N", "o", "t", " ", "s", "p", "l", "i", "t" ]
split('') 会把数据拆分为一个数组，括号里的 '' 是把数据拆分为每个字符串的意思，如果不用就不会拆分成每个字符串。
reverse() 是翻转的意思，把数据反过来。
message.reverse() == Not split   // 无效，因为只能对数组起作用
所以要跟在 split('') 后使用。
join('') 是重组的意思，把数组合成一个字符串。
message.split('').join('')
slpit 后会拆散会数组，join 后就会变回原来的字符串了。
所以我们要把数据反过来重组就可以用：
message.split('').reverse( ).join('')




给元素绑定href时可以也绑一个target，新窗口打开页面。

new Vue({
  el: '#app',
  data: {
    url: 'http://www.runoob.com',
    target:'_blank'
  }
})



v-if 与 v-show 的区别？

在切换 v-if 块时，Vue.js 有一个局部编译/卸载过程，因为 v-if 之中的模板也可能包括数据绑定或子组件。v-if 是真实的条件渲染，因为它会确保条件块在切换当中合适地销毁与重建条件块内的事件监听器和子组件。
v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——在条件第一次变为真时才开始局部编译（编译会被缓存起来）。
相比之下，v-show 简单得多——元素始终被编译并保留，只是简单地基于 CSS 切换。
一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好


v-for 可以通过一个对象的属性来迭代数据
也可以提供第二个的参数为键名
第三个参数为索引
v-for 也可以循环整数
还可以循环数组


v-for 默认行为试着不改变整体，而是替换元素。迫使其重新排序的元素，你需要提供一个 key 的特殊属性：
<div v-for="item in items" :key="item.id">  {{ item.text }}</div>


九九乘法是程序员的最爱:
<div id="app">
    <div v-for="n in 9">
        <b v-for="m in n">
            {{m}}*{{n}}={{m*n}}
        </b>
    </div>
</div>
